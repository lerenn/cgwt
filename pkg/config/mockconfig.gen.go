// Code generated by MockGen. DO NOT EDIT.
// Source: config.go
//
// Generated by this command:
//
//	mockgen -source=config.go -destination=mockconfig.gen.go -package=config
//

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigManager is a mock of ConfigManager interface.
type MockConfigManager struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagerMockRecorder
	isgomock struct{}
}

// MockConfigManagerMockRecorder is the mock recorder for MockConfigManager.
type MockConfigManagerMockRecorder struct {
	mock *MockConfigManager
}

// NewMockConfigManager creates a new mock instance.
func NewMockConfigManager(ctrl *gomock.Controller) *MockConfigManager {
	mock := &MockConfigManager{ctrl: ctrl}
	mock.recorder = &MockConfigManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManager) EXPECT() *MockConfigManagerMockRecorder {
	return m.recorder
}

// DefaultConfig mocks base method.
func (m *MockConfigManager) DefaultConfig() *Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultConfig")
	ret0, _ := ret[0].(*Config)
	return ret0
}

// DefaultConfig indicates an expected call of DefaultConfig.
func (mr *MockConfigManagerMockRecorder) DefaultConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultConfig", reflect.TypeOf((*MockConfigManager)(nil).DefaultConfig))
}

// LoadConfig mocks base method.
func (m *MockConfigManager) LoadConfig(configPath string) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", configPath)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig.
func (mr *MockConfigManagerMockRecorder) LoadConfig(configPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockConfigManager)(nil).LoadConfig), configPath)
}
