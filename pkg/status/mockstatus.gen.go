// Code generated by MockGen. DO NOT EDIT.
// Source: status.go
//
// Generated by this command:
//
//	mockgen -source=status.go -destination=mockstatus.gen.go -package=status
//

// Package status is a generated GoMock package.
package status

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddWorktree mocks base method.
func (m *MockManager) AddWorktree(repoURL, branch, worktreePath, workspacePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorktree", repoURL, branch, worktreePath, workspacePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWorktree indicates an expected call of AddWorktree.
func (mr *MockManagerMockRecorder) AddWorktree(repoURL, branch, worktreePath, workspacePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorktree", reflect.TypeOf((*MockManager)(nil).AddWorktree), repoURL, branch, worktreePath, workspacePath)
}

// GetWorktree mocks base method.
func (m *MockManager) GetWorktree(repoURL, branch string) (*Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorktree", repoURL, branch)
	ret0, _ := ret[0].(*Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorktree indicates an expected call of GetWorktree.
func (mr *MockManagerMockRecorder) GetWorktree(repoURL, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorktree", reflect.TypeOf((*MockManager)(nil).GetWorktree), repoURL, branch)
}

// ListAllWorktrees mocks base method.
func (m *MockManager) ListAllWorktrees() ([]Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllWorktrees")
	ret0, _ := ret[0].([]Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllWorktrees indicates an expected call of ListAllWorktrees.
func (mr *MockManagerMockRecorder) ListAllWorktrees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllWorktrees", reflect.TypeOf((*MockManager)(nil).ListAllWorktrees))
}

// RemoveWorktree mocks base method.
func (m *MockManager) RemoveWorktree(repoURL, branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWorktree", repoURL, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWorktree indicates an expected call of RemoveWorktree.
func (mr *MockManagerMockRecorder) RemoveWorktree(repoURL, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWorktree", reflect.TypeOf((*MockManager)(nil).RemoveWorktree), repoURL, branch)
}
