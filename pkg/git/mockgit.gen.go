// Code generated by MockGen. DO NOT EDIT.
// Source: git.go
//
// Generated by this command:
//
//	mockgen -source=git.go -destination=mockgit.gen.go -package=git
//

// Package git is a generated GoMock package.
package git

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGit is a mock of Git interface.
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
	isgomock struct{}
}

// MockGitMockRecorder is the mock recorder for MockGit.
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance.
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGit) EXPECT() *MockGitMockRecorder {
	return m.recorder
}

// ConfigGet mocks base method.
func (m *MockGit) ConfigGet(workDir, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigGet", workDir, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigGet indicates an expected call of ConfigGet.
func (mr *MockGitMockRecorder) ConfigGet(workDir, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigGet", reflect.TypeOf((*MockGit)(nil).ConfigGet), workDir, key)
}

// Status mocks base method.
func (m *MockGit) Status(workDir string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", workDir)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockGitMockRecorder) Status(workDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockGit)(nil).Status), workDir)
}
